#version 460 core

#extension GL_ARB_bindless_texture : require

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (rgba16f) writeonly uniform image3D uInjected;

uniform usampler3D uAlbedo;
uniform usampler3D uNormal;

uniform uint uVoxelResolution;
uniform float uWorldSize;
uniform mat4 uViewMatrix;

#include "light_sources.glsl"

vec3 CalcDiffusePBRLightingForSingleLightSource(
    vec3 albedo, vec3 normal, vec3 lightDirection, vec3 lightColor
) {
    normal = normalize(normal);
    lightDirection = normalize(lightDirection);
    float nDotL = max(dot(normal, lightDirection), 0.0);
    return albedo * lightColor * nDotL;
}

vec3 CalcDiffusePBRLighting(
    vec3 albedo, vec3 normal, vec3 position, mat4 cameraViewMatrix
) {
    vec3 color = vec3(0);

    for (int i = 0; i < directionalLights.length(); i++) {
        float shadow = directionalLights[i].shadowEnabled ? 
            CalcDirectionalShadow(directionalLights[i].shadow, position, cameraViewMatrix) : 0;

        color += CalcDiffusePBRLightingForSingleLightSource(
            albedo, normal, -directionalLights[i].dir,
            directionalLights[i].color
        ) * (1 - shadow);
    }
    for (int i = 0; i < pointLights.length(); i++) {
        float shadow = pointLights[i].shadowEnabled ? 
            CalcOmnidirectionalShadow(pointLights[i].shadow, position) : 0;

        vec3 attenuation = pointLights[i].attenuation;
        float dis = distance(pointLights[i].pos, position);
        vec3 pointLightColor = pointLights[i].color /
            (attenuation.x + attenuation.y * dis + attenuation.z * pow(dis, 2));
        color += CalcDiffusePBRLightingForSingleLightSource(
            albedo, normal, pointLights[i].pos - position,
            pointLightColor
        ) * (1 - shadow);
    }

    return color;
}

vec3 VoxelPositionToWorldPosition(ivec3 voxelPosition) {
    return ((vec3(voxelPosition) + 0.5) / float(uVoxelResolution) - 0.5) * uWorldSize;
}

void main() {
    if (gl_GlobalInvocationID.x >= uVoxelResolution ||
		gl_GlobalInvocationID.y >= uVoxelResolution ||
		gl_GlobalInvocationID.z >= uVoxelResolution) return;

    ivec3 voxelPosition = ivec3(gl_GlobalInvocationID);
    vec3 position = VoxelPositionToWorldPosition(voxelPosition);
	vec4 albedo = unpackUnorm4x8(texelFetch(uAlbedo, voxelPosition, 0).r);
    if (albedo.a == 0) return;

    vec3 normal = unpackUnorm4x8(texelFetch(uNormal, voxelPosition, 0).r).xyz * 2 - 1;
    vec3 lighting = CalcDiffusePBRLighting(albedo.rgb, normal, position, uViewMatrix);

    imageStore(uInjected, voxelPosition, vec4(lighting, 1));
}
