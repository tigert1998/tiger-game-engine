#version 460 core

#extension GL_ARB_bindless_texture : require

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (rgba16f) writeonly uniform image3D uInjected;

uniform usampler3D uAlbedo;
uniform usampler3D uNormal;
uniform usampler3D uMetallicAndRoughness;

uniform uint uVoxelResolution;
uniform float uWorldSize;
uniform vec3 uCameraPosition;

#include "light_sources.glsl"

vec3 CalcDiffusePBRLightingForSingleLightSource(
    vec3 albedo, float metallic, float roughness,
    vec3 normal, vec3 viewDirection, vec3 lightDirection,
    vec3 lightColor
) {
    normal = normalize(normal);
    viewDirection = normalize(viewDirection);
    lightDirection = normalize(lightDirection);
    vec3 halfway = normalize(viewDirection + lightDirection);

    vec3 f0 = mix(vec3(0.04), albedo, metallic);
    vec3 F = FresnelSchlick(halfway, viewDirection, f0);
    vec3 kd = (vec3(1.0) - F) * (1.0 - metallic);

    const float PI = radians(180);
    float nDotL = max(dot(normal, lightDirection), 0.0);
    return kd * albedo / PI * lightColor * nDotL;
}

vec3 CalcDiffusePBRLighting(
    vec3 albedo, float metallic, float roughness,
    vec3 normal, vec3 cameraPosition, vec3 position
) {
    vec3 color = vec3(0);

    for (int i = 0; i < directionalLights.length(); i++) {
        float shadow = directionalLights[i].shadowEnabled ?
            CalcDirectionalShadow(directionalLights[i].shadow, position, mat4(1), true) : 0;

        color += CalcDiffusePBRLightingForSingleLightSource(
            albedo, metallic, roughness,
            normal, cameraPosition - position, -directionalLights[i].dir,
            directionalLights[i].color
        ) * (1 - shadow);
    }
    for (int i = 0; i < pointLights.length(); i++) {
        float shadow = pointLights[i].shadowEnabled ? 
            CalcOmnidirectionalShadow(pointLights[i].shadow, position) : 0;

        vec3 attenuation = pointLights[i].attenuation;
        float dis = distance(pointLights[i].pos, position);
        vec3 pointLightColor = pointLights[i].color /
            (attenuation.x + attenuation.y * dis + attenuation.z * pow(dis, 2));
        color += CalcDiffusePBRLightingForSingleLightSource(
            albedo, metallic, roughness,
            normal, cameraPosition - position, pointLights[i].pos - position,
            pointLightColor
        ) * (1 - shadow);
    }

    return color;
}

vec3 VoxelPositionToWorldPosition(ivec3 voxelPosition) {
    return ((vec3(voxelPosition) + 0.5) / float(uVoxelResolution) - 0.5) * uWorldSize;
}

void main() {
    if (gl_GlobalInvocationID.x >= uVoxelResolution ||
        gl_GlobalInvocationID.y >= uVoxelResolution ||
        gl_GlobalInvocationID.z >= uVoxelResolution) return;

    ivec3 voxelPosition = ivec3(gl_GlobalInvocationID);
    vec3 position = VoxelPositionToWorldPosition(voxelPosition);
    vec4 albedo = unpackUnorm4x8(texelFetch(uAlbedo, voxelPosition, 0).r);
    if (albedo.a == 0) return;

    vec3 normal = unpackUnorm4x8(texelFetch(uNormal, voxelPosition, 0).r).xyz * 2 - 1;
    vec2 metallicAndRoughness = unpackUnorm4x8(texelFetch(uMetallicAndRoughness, voxelPosition, 0).r).xy;
    float metallic = metallicAndRoughness.x;
    float roughness = metallicAndRoughness.y;

    vec3 radiance = CalcDiffusePBRLighting(
        albedo.rgb, metallic, roughness,
        normal, uCameraPosition, position);

    imageStore(uInjected, voxelPosition, vec4(radiance, 1));
}
